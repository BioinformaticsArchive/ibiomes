# ===========================================================
# OUTPUT CONTROL 
# ===========================================================

# Display messages, warnings, progress bars, etc to console
OUTPUT_TO_CONSOLE=TRUE
# Output error stack to console
OUTPUT_ERROR_STACK_TO_CONSOLE=FALSE

# ===========================================================
# DEFAULT PARSER BEHAVIOR 
# ===========================================================

# Default software context (Amber, Gaussian, NWChem, NONE...)
DEFAULT_SOFTWARE_CONTEXT=

# Default parser rule descriptor file
DEFAULT_PARSER_RULE_XML_FILE=

# ===========================================================
# GROUPING FOR REMD TASKS
# ===========================================================
# Policy for REMD task grouping. For example one can specify if all the parallel 
# REMD run are in different folders, or if REMD run groups 
# should be inferred from the associated file names, using a given pattern.
# 
# A pattern contains characters that are shared by all targeted tasks (e.g. 
# 'rep.' prefix , '.out' suffix), characters that are shared only by tasks 
# in the same group, and characters that are differentiate the tasks within 
# the same group.
#
# For example, assume 2 REMD runs with 10 replica each. The output could look 
# like this: rep.000.000.out, rep.000.001.out, ..., rep.000.009.out for the 
# first group (run) and rep.001.000.out, rep.001.001.out, ..., rep.001.009.out 
# for the second group. The file pattern can be described as 
# rep.[group-id].[task-id].out. 
#
# Syntax: replace by '$' the sequence of numeric characters representing 
# the group ID and by '#' the sequence of numeric characters that identify  
# tasks within their group.
# Using the same example the file pattern would be: 
# 'rep.$.#.out'.

TASK_GROUP_ITEM_PATTERN=rep.$.#.out
